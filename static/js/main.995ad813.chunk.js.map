{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box.component.jsx","components/Test.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","character","id","name","email","CardList","characters","map","key","SearchBox","placeholder","handleChange","type","onChange","Test","state","searchField","fetch","then","response","json","users","setState","this","filtered","filter","toLowerCase","includes","e","target","value","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,uMCG9BC,G,MAAO,SAACC,GAAD,OAEhB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,UAAUC,GAA1C,4BACtB,gCAAML,EAAMI,UAAUE,MACtB,+BAAKN,EAAMI,UAAUG,UCJhBC,G,MAAW,SAACR,GAAD,OAIxB,yBAAKC,UAAU,aACVD,EAAMS,WAAWC,KAAI,SAAAN,GAAS,OAC/B,kBAAC,EAAD,CAAMO,IAAKP,EAAUC,GAAID,UAAWA,UCL3BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAb,UAAY,SACZc,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCyECG,E,YA7Ef,aAAc,IAAD,8BACb,+CAEKC,MAAM,CAEPT,WAAY,GACZU,YAAa,IANJ,E,iFAYO,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAEVA,EAASC,UAIZF,MAAK,SAAAG,GAAK,OACP,EAAKC,SAAS,CAAChB,WAAYe,S,+BAO1B,IAAD,SAEgCE,KAAKR,MAAjCT,EAFJ,EAEIA,WAAYU,EAFhB,EAEgBA,YAGdQ,EAAWlB,EAAWmB,QAAO,SAAAxB,GAAS,OACxCA,EAAUE,KAAKuB,cAAcC,SAASX,EAAYU,kBAGtD,OACI,yBAAK5B,UAAU,QACZ,gDAEC,kBAAC,EAAD,CACAY,YAAY,mBACZC,aAAiB,SAAAiB,GAAC,OACd,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAOzC,6BACA,6BAEC,kBAAC,EAAD,CAAUxB,WAAckB,S,GAvDlBO,IAAMC,WCuBVC,MAvBf,WACE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAchB,kBAAC,EAAD,SCVYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.995ad813.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => (\n\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.character.id}?set=set2&size=180x180`} />\n        <h1> {props.character.name}</h1>\n        <p> {props.character.email}</p>\n    </div>\n\n);","import React from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n    //children are what is passed inbetween the brackets of our component\n\n\n<div className='card-list'> \n    {props.characters.map(character =>(\n    <Card key={character.id} character={character} />\n    // <div key={character.name}> {character.name} </div>\n    ))}\n</div>\n)","import React from 'react'\nimport './search-box.styles.css'\n\n// functional components, unlike class components, dont have access to state because they dont have access to constructor, which is a class component or state or lifecycle methods.\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className = 'search'\n    type='search' \n    placeholder= {placeholder}\n    onChange={handleChange}  />\n) ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CardList} from './card-list/card-list.component';\nimport {SearchBox} from './search-box.component'\n\nclass Test extends React.Component{\nconstructor(){\nsuper();\n\nthis.state={\n    // string: 'Hello, this is a test'\n    characters: [ ],\n    searchField: ''\n};\n\n// this.handleChange = this.handleChange.bind(this);\n}\n\ncomponentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>   \n       \n        response.json() //returns data in a readable json format.\n        )\n\n      \n    .then(users =>  // then we take that json data and put it in our setState.\n        this.setState({characters: users })\n        // console.log(users)\n        \n        \n        )\n}\n\nrender(){\n\n    const { characters, searchField } = this.state;\n    //quicker way to write object destructuring: const characters = this.state.characters\n\n    const filtered = characters.filter(character => \n        character.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n\n    return(\n        <div className=\"test\">\n           <h1>Monsters Rolodex</h1>\n\n            <SearchBox\n            placeholder='Search Character'\n            handleChange = { e => \n                this.setState({searchField: e.target.value})\n            }\n            //arrow functions automatically allows us to set 'this' when used and automatically bind 'this' to where the arrow function is used.\n            />\n            {/* //setState is a asynchronous function\n            // this is why we are passing a callback function to see the immediate changes. */}\n           \n            <br></br>\n            <br></br>\n             {/* <CardList characters = {this.state.characters} /> */}\n             <CardList characters = {filtered} />\n             {/* onChange is a synthetic event that detects any changes that happen. */}\n            \n          {/* {this.state.string}\n                <button onClick={()=> this.setState({string: \"Hello Shosho\" })}>My Button</button> */}\n            {/* //must use setState because React intercepts user events and changes re-renders the component when state changes */}\n\n            {/* {this.state.characters.map\n                (charac => \n                    <h1 key = {charac.name}>{ charac.name}</h1>\n                ) \n            } */}\n\n            {/* lifeCycle methods are methods that are called at different stages when a component gets rendered. */}\n{/*            \n            Keys are used to distinguish components of the same time and to sort of say like \"hey, THIS one changed\" and to rerender it. */}\n          \n        </div>\n    )\n}\n\n}\n\nexport default Test;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Test from './components/Test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n          \n        </a> */}\n        <Test/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}